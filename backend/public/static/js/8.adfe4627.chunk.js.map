{"version":3,"sources":["places/pages/NewPlace.js","shared/components/FormElements/ImageUpload.js"],"names":["NewPlace","auth","useContext","AuthContext","useHttpClient","isLoading","error","sendRequest","clearError","useForm","title","value","isValid","description","address","image","formState","inputHandler","history","useHistory","placeSubmitHandler","event","a","preventDefault","formData","FormData","append","inputs","process","Authorization","token","push","onClear","className","onSubmit","asOverlay","id","element","type","label","validators","VALIDATOR_REQUIRE","errorText","onInput","VALIDATOR_MINLENGTH","disabled","ImageUpload","props","useState","file","setFile","previewUrl","setPreviewUrl","setIsValid","filePickerRef","useRef","useEffect","fileReader","FileReader","onload","result","readAsDataURL","ref","style","display","accept","onChange","pickedFile","fileIsValid","target","files","length","center","src","alt","onClick","current","click"],"mappings":"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","file":"static/js/8.adfe4627.chunk.js","sourcesContent":["import React, { useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { AuthContext } from '../../shared/context/auth-context';\nimport useForm from '../../shared/hooks/form-hook';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from '../../shared/util/validators';\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport './PlaceForm.css';\nimport ImageUpload from '../../shared/components/FormElements/ImageUpload';\n\nfunction NewPlace() {\n  const auth = useContext(AuthContext);\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const [formState, inputHandler] = useForm(\n    {\n      title: {\n        value: '',\n        isValid: false,\n      },\n      description: {\n        value: '',\n        isValid: false,\n      },\n      address: {\n        value: '',\n        isValid: false,\n      },\n      image: {\n        value: null,\n        isValid: false,\n      },\n    },\n    false,\n  );\n\n  const history = useHistory();\n\n  const placeSubmitHandler = async (event) => {\n    event.preventDefault();\n\n    try {\n      const formData = new FormData();\n      formData.append('title', formState.inputs.title.value);\n      formData.append('description', formState.inputs.description.value);\n      formData.append('address', formState.inputs.address.value);\n      formData.append('image', formState.inputs.image.value);\n\n      await sendRequest(`${process.env.REACT_APP_BACKEND_URL}/places/`, 'POST', formData, {\n        Authorization: `Bearer ${auth.token}`,\n      });\n      history.push('/');\n    } catch (error) {}\n  };\n\n  return (\n    <>\n      <ErrorModal error={error} onClear={clearError} />\n      <form className=\"place-form\" onSubmit={placeSubmitHandler}>\n        {isLoading && <LoadingSpinner asOverlay />}\n        <Input\n          id=\"title\"\n          element=\"input\"\n          type=\"text\"\n          label=\"Title\"\n          validators={[VALIDATOR_REQUIRE()]}\n          errorText=\"Please enter a valid title\"\n          onInput={inputHandler}\n        />{' '}\n        <Input\n          id=\"description\"\n          element=\"textarea\"\n          label=\"Description\"\n          validators={[VALIDATOR_MINLENGTH(5)]}\n          errorText=\"Please enter a valid description - at least 5 caharacters.\"\n          onInput={inputHandler}\n        />\n        <Input\n          id=\"address\"\n          element=\"textarea\"\n          label=\"Address\"\n          validators={[VALIDATOR_REQUIRE()]}\n          errorText=\"Please enter a valid address.\"\n          onInput={inputHandler}\n        />\n        <ImageUpload id=\"image\" onInput={inputHandler} errorText=\"Please provide an image.\" />\n        <Button type=\"submit\" disabled={!formState.isValid}>\n          ADD PLACE\n        </Button>\n      </form>\n    </>\n  );\n}\n\nexport default NewPlace;\n","import React, { useRef, useState, useEffect } from 'react';\n\nimport Button from './Button';\nimport './ImageUpload.css';\n\nconst ImageUpload = (props) => {\n  const [file, setFile] = useState();\n  const [previewUrl, setPreviewUrl] = useState();\n  const [isValid, setIsValid] = useState(false);\n\n  const filePickerRef = useRef();\n\n  useEffect(() => {\n    if (!file) {\n      return;\n    }\n    const fileReader = new FileReader();\n    fileReader.onload = () => {\n      setPreviewUrl(fileReader.result);\n    };\n    fileReader.readAsDataURL(file);\n  }, [file]);\n\n  const pickedHandler = (event) => {\n    let pickedFile;\n    let fileIsValid = isValid;\n    if (event.target.files && event.target.files.length === 1) {\n      pickedFile = event.target.files[0];\n      setFile(pickedFile);\n      setIsValid(true);\n      fileIsValid = true;\n    } else {\n      setIsValid(false);\n      fileIsValid = false;\n    }\n    props.onInput(props.id, pickedFile, fileIsValid);\n  };\n\n  const pickImageHandler = () => {\n    filePickerRef.current.click();\n  };\n\n  return (\n    <div className=\"form-control\">\n      <input\n        id={props.id}\n        ref={filePickerRef}\n        style={{ display: 'none' }}\n        type=\"file\"\n        accept=\".jpg,.png,.jpeg\"\n        onChange={pickedHandler}\n      />\n      <div className={`image-upload ${props.center && 'center'}`}>\n        <div className=\"image-upload__preview\">\n          {previewUrl && <img src={previewUrl} alt=\"Preview\" />}\n          {!previewUrl && <p>Please pick an image.</p>}\n        </div>\n        <Button type=\"button\" onClick={pickImageHandler}>\n          PICK IMAGE\n        </Button>\n      </div>\n      {!isValid && <p>{props.errorText}</p>}\n    </div>\n  );\n};\n\nexport default ImageUpload;\n"],"sourceRoot":""}