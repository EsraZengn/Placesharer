{"version":3,"sources":["user/pages/Auth.js","shared/components/UIElements/Card.js","shared/components/FormElements/ImageUpload.js"],"names":["Auth","auth","useContext","AuthContext","useState","isLoginMode","setIsLoginMode","useHttpClient","isLoading","error","sendRequest","clearError","useForm","email","value","isValid","password","formState","inputHandler","setFormData","authSubmitHandler","event","a","preventDefault","process","JSON","stringify","inputs","responseData","login","userId","token","formData","FormData","append","name","image","onClear","className","style","padding","asOverlay","onSubmit","element","id","type","label","validators","VALIDATOR_REQUIRE","errorText","onInput","center","VALIDATOR_EMAIL","VALIDATOR_MINLENGTH","disabled","inverse","onClick","undefined","prevMode","Card","props","children","ImageUpload","file","setFile","previewUrl","setPreviewUrl","setIsValid","filePickerRef","useRef","useEffect","fileReader","FileReader","onload","result","readAsDataURL","ref","display","accept","onChange","pickedFile","fileIsValid","target","files","length","src","alt","current","click"],"mappings":"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","file":"static/js/7.a30b4c06.chunk.js","sourcesContent":["import React, { useState, useContext } from 'react';\nimport { AuthContext } from '../../shared/context/auth-context';\nimport useForm from '../../shared/hooks/form-hook';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport {\n  VALIDATOR_EMAIL,\n  VALIDATOR_MINLENGTH,\n  VALIDATOR_REQUIRE,\n} from '../../shared/util/validators';\nimport Input from '../../shared/components/FormElements/Input';\nimport Card from '../../shared/components/UIElements/Card';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport Button from '../../shared/components/FormElements/Button';\nimport './Auth.css';\nimport ImageUpload from '../../shared/components/FormElements/ImageUpload';\n\nfunction Auth() {\n  const auth = useContext(AuthContext);\n  const [isLoginMode, setIsLoginMode] = useState(true);\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n\n  const [formState, inputHandler, setFormData] = useForm(\n    {\n      email: {\n        value: '',\n        isValid: false,\n      },\n      password: {\n        value: '',\n        isValid: false,\n      },\n    },\n    false,\n  );\n\n  const switchModeHandler = () => {\n    if (!isLoginMode) {\n      setFormData(\n        {\n          ...formState.inputs,\n          name: undefined,\n          image: undefined,\n        },\n        formState.inputs.email.isValid && formState.inputs.password.isValid,\n      );\n    } else {\n      setFormData(\n        {\n          ...formState.inputs,\n          name: {\n            value: '',\n            isValid: false,\n          },\n          image: {\n            value: null,\n            isValid: false,\n          },\n        },\n        false,\n      );\n    }\n    setIsLoginMode((prevMode) => !prevMode);\n  };\n\n  const authSubmitHandler = async (event) => {\n    event.preventDefault();\n\n    if (isLoginMode) {\n      try {\n        const responseData = await sendRequest(\n          `${process.env.REACT_APP_BACKEND_URL}/users/login`,\n          'POST',\n          JSON.stringify({\n            email: formState.inputs.email.value,\n            password: formState.inputs.password.value,\n          }),\n          {\n            'Content-Type': 'application/json',\n          },\n        );\n        auth.login(responseData.userId, responseData.token);\n      } catch (error) {}\n    } else {\n      try {\n        const formData = new FormData();\n        formData.append('name', formState.inputs.name.value);\n        formData.append('email', formState.inputs.email.value);\n        formData.append('password', formState.inputs.password.value);\n        formData.append('image', formState.inputs.image.value);\n\n        const responseData = await sendRequest(\n          `${process.env.REACT_APP_BACKEND_URL}/users/signup`,\n          'POST',\n          formData,\n        );\n        auth.login(responseData.userId, responseData.token);\n      } catch (error) {}\n    }\n  };\n\n  return (\n    <>\n      <ErrorModal error={error} onClear={clearError} />\n      <Card className=\"authentication\" style={{ padding: '1rem' }}>\n        {isLoading && <LoadingSpinner asOverlay />}\n        <h2>Login required</h2>\n        <hr />\n        <form onSubmit={authSubmitHandler}>\n          {!isLoginMode && (\n            <Input\n              element=\"input\"\n              id=\"name\"\n              type=\"text\"\n              label=\"Your Name\"\n              validators={[VALIDATOR_REQUIRE()]}\n              errorText=\"Please enter a valid name.\"\n              onInput={inputHandler}\n            />\n          )}\n          {!isLoginMode && (\n            <ImageUpload\n              center\n              id=\"image\"\n              onInput={inputHandler}\n              errorText=\"Please provide an image.\"\n            />\n          )}\n          <Input\n            element=\"input\"\n            id=\"email\"\n            type=\"email\"\n            label=\"E-mail\"\n            validators={[VALIDATOR_EMAIL()]}\n            errorText=\"Please enter a valid email address\"\n            onInput={inputHandler}\n          />\n          <Input\n            element=\"input\"\n            id=\"password\"\n            type=\"password\"\n            label=\"Password\"\n            validators={[VALIDATOR_MINLENGTH(6)]}\n            errorText=\"Please enter a valid password, at least 6 characters.\"\n            onInput={inputHandler}\n          />\n          <Button type=\"submit\" disabled={!formState.isValid}>\n            {isLoginMode ? 'LOGIN' : 'SIGNUP'}\n          </Button>\n        </form>\n        <Button inverse onClick={switchModeHandler}>\n          SWITCH TO {isLoginMode ? 'SIGNUP' : 'LOGIN'}\n        </Button>\n      </Card>\n    </>\n  );\n}\n\nexport default Auth;\n","import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { useRef, useState, useEffect } from 'react';\n\nimport Button from './Button';\nimport './ImageUpload.css';\n\nconst ImageUpload = (props) => {\n  const [file, setFile] = useState();\n  const [previewUrl, setPreviewUrl] = useState();\n  const [isValid, setIsValid] = useState(false);\n\n  const filePickerRef = useRef();\n\n  useEffect(() => {\n    if (!file) {\n      return;\n    }\n    const fileReader = new FileReader();\n    fileReader.onload = () => {\n      setPreviewUrl(fileReader.result);\n    };\n    fileReader.readAsDataURL(file);\n  }, [file]);\n\n  const pickedHandler = (event) => {\n    let pickedFile;\n    let fileIsValid = isValid;\n    if (event.target.files && event.target.files.length === 1) {\n      pickedFile = event.target.files[0];\n      setFile(pickedFile);\n      setIsValid(true);\n      fileIsValid = true;\n    } else {\n      setIsValid(false);\n      fileIsValid = false;\n    }\n    props.onInput(props.id, pickedFile, fileIsValid);\n  };\n\n  const pickImageHandler = () => {\n    filePickerRef.current.click();\n  };\n\n  return (\n    <div className=\"form-control\">\n      <input\n        id={props.id}\n        ref={filePickerRef}\n        style={{ display: 'none' }}\n        type=\"file\"\n        accept=\".jpg,.png,.jpeg\"\n        onChange={pickedHandler}\n      />\n      <div className={`image-upload ${props.center && 'center'}`}>\n        <div className=\"image-upload__preview\">\n          {previewUrl && <img src={previewUrl} alt=\"Preview\" />}\n          {!previewUrl && <p>Please pick an image.</p>}\n        </div>\n        <Button type=\"button\" onClick={pickImageHandler}>\n          PICK IMAGE\n        </Button>\n      </div>\n      {!isValid && <p>{props.errorText}</p>}\n    </div>\n  );\n};\n\nexport default ImageUpload;\n"],"sourceRoot":""}