{"version":3,"sources":["places/pages/UpdatePlace.js","shared/components/UIElements/Card.js"],"names":["UpdatePlace","auth","useContext","AuthContext","useHttpClient","isLoading","error","sendRequest","clearError","useState","place","setPlace","placeId","useParams","history","useHistory","useForm","title","value","isValid","description","formState","inputHandler","setFormData","useEffect","a","process","Authorization","token","responseData","fetchPlace","placeUpdateSubmitHandler","event","preventDefault","JSON","stringify","inputs","push","userId","className","onClear","onSubmit","id","element","type","label","validators","VALIDATOR_REQUIRE","errorText","onInput","initialValue","initialValid","VALIDATOR_MINLENGTH","disabled","Card","props","style","children"],"mappings":"uPA8HeA,UAjHf,WACE,IAAMC,EAAOC,qBAAWC,KADH,EAGiCC,cAA9CC,EAHa,EAGbA,UAAWC,EAHE,EAGFA,MAAOC,EAHL,EAGKA,YAAaC,EAHlB,EAGkBA,WAHlB,EAIKC,qBAJL,mBAIdC,EAJc,KAIPC,EAJO,KAKbC,EAAYC,cAAZD,QACFE,EAAUC,cANK,EAQ0BC,YAC7C,CACEC,MAAO,CAAEC,MAAO,GAAIC,SAAS,GAC7BC,YAAa,CAAEF,MAAO,GAAIC,SAAS,KAErC,GAbmB,mBAQdE,EARc,KAQHC,EARG,KAQWC,EARX,KAgBrBC,qBAAU,YACQ,uCAAG,4BAAAC,EAAA,+EAEYlB,EAAY,GAAD,OACjCmB,2CADiC,mBACWd,GAC/C,MACA,KACA,CACEe,cAAc,UAAD,OAAY1B,EAAK2B,SAPnB,OAETC,EAFS,OAUflB,EAASkB,EAAanB,OACtBa,EACE,CACEN,MAAO,CAAEC,MAAOW,EAAanB,MAAMO,MAAOE,SAAS,GACnDC,YAAa,CAAEF,MAAOW,EAAanB,MAAMU,YAAaD,SAAS,KAEjE,GAhBa,yGAAH,qDAoBhBW,KACC,CAAC7B,EAAK2B,MAAOhB,EAASL,EAAagB,IAEtC,IAAMQ,EAAwB,uCAAG,WAAOC,GAAP,SAAAP,EAAA,6DAC/BO,EAAMC,iBADyB,kBAGvB1B,EAAY,GAAD,OACZmB,2CADY,mBACgCd,GAC/C,QACAsB,KAAKC,UAAU,CACblB,MAAOI,EAAUe,OAAOnB,MAAMC,MAC9BE,YAAaC,EAAUe,OAAOhB,YAAYF,QAE5C,CACE,eAAgB,mBAChBS,cAAc,UAAD,OAAY1B,EAAK2B,SAZL,OAe7Bd,EAAQuB,KAAR,WAAiBpC,EAAKqC,OAAtB,YAf6B,uGAAH,sDAmB9B,OAAIjC,EAEA,yBAAKkC,UAAU,UACb,kBAAC,IAAD,OAKD7B,GAAUJ,EAWb,oCACE,kBAAC,IAAD,CAAYA,MAAOA,EAAOkC,QAAShC,KACjCH,GAAaK,GACb,0BAAM6B,UAAU,aAAaE,SAAUV,GACrC,kBAAC,IAAD,CACEW,GAAG,QACHC,QAAQ,QACRC,KAAK,OACLC,MAAM,QACNC,WAAY,CAACC,eACbC,UAAU,8BACVC,QAAS3B,EACT4B,aAAcxC,EAAMO,MACpBkC,cAAc,IAEhB,kBAAC,IAAD,CACET,GAAG,cACHC,QAAQ,WACRC,KAAK,OACLC,MAAM,cACNC,WAAY,CAACM,YAAoB,IACjCJ,UAAU,wDACVC,QAAS3B,EACT4B,aAAcxC,EAAMU,YACpB+B,cAAc,IAEhB,kBAAC,IAAD,CAAQP,KAAK,SAASS,UAAWhC,EAAUF,SAA3C,kBAnCJ,yBAAKoB,UAAU,UACb,kBAAC,IAAD,KACE,yD,gCCpFV,0BAYee,IARF,SAAAC,GACX,OACE,yBAAKhB,UAAS,eAAUgB,EAAMhB,WAAaiB,MAAOD,EAAMC,OACrDD,EAAME,Y","file":"static/js/9.c93a3491.chunk.js","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\nimport { useParams, useHistory } from 'react-router-dom';\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from '../../shared/util/validators';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport useForm from '../../shared/hooks/form-hook';\nimport { AuthContext } from '../../shared/context/auth-context';\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport Card from '../../shared/components/UIElements/Card';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport './PlaceForm.css';\n\nfunction UpdatePlace() {\n  const auth = useContext(AuthContext);\n\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const [place, setPlace] = useState();\n  const { placeId } = useParams();\n  const history = useHistory();\n\n  const [formState, inputHandler, setFormData] = useForm(\n    {\n      title: { value: '', isValid: false },\n      description: { value: '', isValid: false },\n    },\n    true,\n  );\n\n  useEffect(() => {\n    const fetchPlace = async () => {\n      try {\n        const responseData = await sendRequest(\n          `${process.env.REACT_APP_BACKEND_URL}/places/${placeId}`,\n          'GET',\n          null,\n          {\n            Authorization: `Bearer ${auth.token}`,\n          },\n        );\n        setPlace(responseData.place);\n        setFormData(\n          {\n            title: { value: responseData.place.title, isValid: true },\n            description: { value: responseData.place.description, isValid: true },\n          },\n          true,\n        );\n      } catch (error) {}\n    };\n    fetchPlace();\n  }, [auth.token, placeId, sendRequest, setFormData]);\n\n  const placeUpdateSubmitHandler = async (event) => {\n    event.preventDefault();\n    try {\n      await sendRequest(\n        `${process.env.REACT_APP_BACKEND_URL}/places/${placeId}`,\n        'PATCH',\n        JSON.stringify({\n          title: formState.inputs.title.value,\n          description: formState.inputs.description.value,\n        }),\n        {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${auth.token}`,\n        },\n      );\n      history.push(`/${auth.userId}/places`);\n    } catch (error) {}\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"center\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (!place && !error) {\n    return (\n      <div className=\"center\">\n        <Card>\n          <h2>Could not find place!</h2>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <ErrorModal error={error} onClear={clearError} />\n      {!isLoading && place && (\n        <form className=\"place-form\" onSubmit={placeUpdateSubmitHandler}>\n          <Input\n            id=\"title\"\n            element=\"input\"\n            type=\"text\"\n            label=\"Title\"\n            validators={[VALIDATOR_REQUIRE()]}\n            errorText=\"Please enter a valid title.\"\n            onInput={inputHandler}\n            initialValue={place.title}\n            initialValid={true}\n          />\n          <Input\n            id=\"description\"\n            element=\"textArea\"\n            type=\"text\"\n            label=\"Description\"\n            validators={[VALIDATOR_MINLENGTH(5)]}\n            errorText=\"Please enter a valid description (min. 5 characters).\"\n            onInput={inputHandler}\n            initialValue={place.description}\n            initialValid={true}\n          />\n          <Button type=\"submit\" disabled={!formState.isValid}>\n            UPDATE PLACE\n          </Button>\n        </form>\n      )}\n    </>\n  );\n}\n\nexport default UpdatePlace;\n","import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n"],"sourceRoot":""}